#include "iostream"
#include "vector"
#include "string"
#include "list"
#include "set"
#include <deque>
#include <map>
#include "algorithm"
#include "functional"
#include "iterator"
#include <numeric>
using namespace std;

class Speaker {
public:
	string m_nmae;
	int    m_score[3];
};

int GenSpeaker(map<int, Speaker>& mapSpeaker, vector<int>& v1) {
	string str = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
	random_shuffle(str.begin(), str.end());

	for (int i = 0; i < 24; i++) {
		Speaker tmp;
		tmp.m_nmae = "Conteatant ";
		tmp.m_nmae = tmp.m_nmae + str[i];
		mapSpeaker.insert(pair<int, Speaker>(100 + i, tmp));
	}

	for (int i = 0; i < 24; i++) {
		v1.push_back(100 + i);//参加比赛的人员
	}

	return 0;
}

//选手抽签
int speech_contest_draw(vector<int>& v1) {
	random_shuffle(v1.begin(), v1.end());
	return 0;
}

//选手比赛
int speech_contest(int index, vector<int>& v1, map<int, Speaker>& mapSpeaker, vector<int>& v2) {
	
	//小组比赛得分记录下来求前三名和后三名
	multimap<int, int, greater<int>> multmapGrop;//小组成绩
	int tmpCount=0;

	for (vector<int>::iterator it = v1.begin(); it != v1.end(); it++) {
		tmpCount++;
		//10评委打分
		{
			deque<int> dscore;
			for (int j = 0; j < 10; j++) {
				int score = 50 + rand() % 50;
				dscore.push_back(score);
			}
			sort(dscore.begin(), dscore.end());
			dscore.pop_back();
			dscore.pop_front();//去除最高分，去除最低分。
			//求平均分
			int scoresum = accumulate(dscore.begin(), dscore.end(), 0);
			int scoreavg = scoresum / dscore.size();
			mapSpeaker[*it].m_score[index] = scoreavg;//选手得分存入容器
			multmapGrop.insert(pair<int, int>(scoreavg, *it));
		}

		//处理分组
		if (tmpCount % 6 == 0) {
			cout << "the group's score" << endl;

			for (multimap<int, int, greater<int>>::iterator mit = multmapGrop.begin(); mit != multmapGrop.end(); mit++) {
				//编号-姓名-得分
				cout << mit->second << "\t" << mapSpeaker[mit->second].m_nmae << "\t" << mit->first << endl;
			}

			//前三名晋级
			while (multmapGrop.size() > 3) {
				multimap<int, int, greater<int>>::iterator it1 = multmapGrop.begin();
				v2.push_back(it1->second);//前三名放到晋级名单
				multmapGrop.erase(it1);
			}

			multmapGrop.clear();//清空本小组比赛成绩
		}

	}
	return 0;
}

//查看比赛结果
int speech_contest_print(int index, vector<int>& v2, map<int, Speaker>& mapSpeaker) {
	
	printf("this is the %d winners.", index + 1);
	cout << endl;
	for (vector<int>::iterator it = v2.begin(); it != v2.end(); it++) {
		cout << "the number:" << *it << "\t" << mapSpeaker[*it].m_nmae << "\t" << mapSpeaker[*it].m_score[index] << endl;
	}
	return 0;
}

int main() {
	//容器的设计
	map<int, Speaker> mapSpeaker;//参加比赛的选手
	vector<int>       v1;//第一轮 演讲比赛 名单
	vector<int>       v2;//第二轮 演讲比赛 名单
	vector<int>       v3;//第三轮 演讲比赛 名单
	vector<int>       v4;//前三名 演讲比赛 名单

	//产生选手 得到第一轮选手的比赛名单
	GenSpeaker(mapSpeaker, v1);

	//第一轮 选手抽签 选手比赛 查看比赛结果
	cout << "\n\n\n the first start" << endl;
	cin.get();
	speech_contest_draw(v1);
	speech_contest(0,v1, mapSpeaker, v2);
	speech_contest_print(0,v2, mapSpeaker);

	//第二轮 选手抽签 选手比赛 查看比赛结果
	cout << "\n\n\n the second start" << endl;
	cin.get();
	speech_contest_draw(v2);
	speech_contest(1, v2, mapSpeaker, v3);
	speech_contest_print(1, v3, mapSpeaker);

	//第三轮 选手抽签 选手比赛 查看比赛结果
	cout << "\n\n\n the third start" << endl;
	cin.get();
	speech_contest_draw(v3);
	speech_contest(2, v3, mapSpeaker, v4);
	speech_contest_print(2, v4, mapSpeaker);


	cout << "hello..." << endl;
	system("pause");
	return 0;
}
