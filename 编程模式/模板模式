#include<iostream>
#include<string.h>
#include<map>
using namespace std;

//行为型模式---->模板模式
//在抽象类中统一操作步骤，并规定好接口；让子类实现接口，从而实现具体子类与操作的解耦合
class MakeCar{
public:
    virtual void MakeHead() = 0;
    virtual void MakeBody() = 0;
    virtual void MakeTail() = 0;

public:
    void Make(){
        MakeHead();
        MakeBody();
        MakeTail();
    }
};

class Jeep: public MakeCar{
public:
    virtual void MakeHead(){
        cout<<"jeep's head.\n";
    }
    virtual void MakeBody(){
        cout<<"jeep's body.\n";
    }
    virtual void MakeTail(){
        cout<<"jeep's tail.\n";
    }
};

class BMW: public MakeCar{
public:
    virtual void MakeHead(){
        cout<<"BMW's head.\n";
    }
    virtual void MakeBody(){
        cout<<"BMW's body.\n";
    }
    virtual void MakeTail(){
        cout<<"BMW's tail.\n";
    }
};


int main(){
    MakeCar* car = new Jeep;
    car->Make();
    delete car;
    cout<<"hello..."<<endl;
    return 0;
}
