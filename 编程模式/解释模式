#include<iostream>
#include<string.h>
#include<list>
using namespace std;

//行为型模式---->解释模式
class Context{
public:
    Context(int num){
        this->m_num = num;
    }

    int getNum(){
        return m_num;
    }

    int getRes(){
        return m_res;
    }

    void setNum(int num){
        m_num = num;
    }

    void setRes(int res){
        m_res = res;
    }
private:
    int m_num;
    int m_res;
};

class Expression{
public:
    Expression(){
        m_context = NULL;
    }

    virtual void interpreter(Context* context) = 0;
    
private:
    Context* m_context;
};

class Add : public Expression{
public:
    Add(){
        m_context = NULL;
    }
    virtual void interpreter(Context* context){
        int num = context->getNum();
        num++;
        context->setNum(num);
        context->setRes(num);
    }
private:
    Context* m_context;

};

class Minus : public Expression{
public:
    Minus(){
        m_context = NULL;
    }
    virtual void interpreter(Context* context){
        int num = context->getNum();
        num--;
        context->setNum(num);
        context->setRes(num);
    }
private:
    Context* m_context;

};



int main(){

    Expression* expression = NULL;
    Expression* expression1 = NULL;
    Context* context = NULL;

    context = new Context(10);
    cout<<context->getNum()<<endl;

    expression = new Add;
    expression->interpreter(context);
    cout<<context->getRes()<<endl;
    ///////////
    expression1 = new Minus;
    expression1->interpreter(context);
    cout<<context->getRes()<<endl;
    

    cout<<"hello..."<<endl;
    return 0;
}
