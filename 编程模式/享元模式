#include<iostream>
#include<string.h>
#include<map>
using namespace std;

//结构型模式---->享元模式
//以共享的方式，高效支持大量的细粒度的对象
class Person{
public:
    Person(string name,int age){
        this->m_name = name;
        this->m_age  = age;
    }

    virtual void printT() = 0;
protected:
    string m_name;
    int    m_age;
};

class Teacher:public Person{
public:
    Teacher(string name,int age,string id) : Person(name,age){
        this->m_id = id;
    }

    virtual void printT(){
        cout<<"name:"<<m_name<<"   age:"<<m_age<<"   id:"<<m_id<<endl;
    }
private:
    string m_id;
};

//完成老师结点存储
class FiyWeightTeacherFactory{
public:
    FiyWeightTeacherFactory(){
        map1.clear();
    }

    ~FiyWeightTeacherFactory(){
        while(!map1.empty()){
            Person* tmp = NULL;
            map<string,Person*>::iterator it = map1.begin();
            tmp = it->second;
            map1.erase(it);//删除第一个节点
            delete tmp;
        }
    }

    Person* GetTeacher(string id){
        Teacher* tmp = NULL;
        map<string,Person*>::iterator it;
        it = map1.find(id);
        //没有找到
        if(it == map1.end()){
            string tmpname;
            cout<<"please Teacher's name:";
            cin>>tmpname;

            int tmpage;
            cout<<"please Teacher's age:";
            cin>>tmpage;
            tmp = new Teacher(tmpname,tmpage,id);

            map1.insert(pair<string,Person*>(id,tmp));
        }
        else{
            tmp = (Teacher*)it->second;
        }
        return tmp;
    }

private:
    map<string,Person*> map1;
};


int main(){
    Person* p1 = NULL;
    Person* p2 = NULL;
    FiyWeightTeacherFactory* fwtf = new FiyWeightTeacherFactory;
    p1 = fwtf->GetTeacher("001");
    p1->printT();

    p1 = fwtf->GetTeacher("001");
    p1->printT();

    delete fwtf;

    cout<<"hello..."<<endl;
    return 0;
}
