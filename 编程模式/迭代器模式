#include<iostream>
#include<string.h>
#include<list>
using namespace std;

//行为型模式---->迭代器模式
typedef int Object;
#define SIZE 5

class MyIteraor{
public:
    virtual void First() = 0;
    virtual void Next() = 0;
    virtual bool IsDone() = 0;
    virtual Object CurrentItem() = 0;
};

class Aggregate{
public:
    virtual MyIteraor* CreatIterator() = 0;
    virtual Object getItem(int index) = 0;
    virtual int getSize() = 0;
};

class ContreteIterator : public MyIteraor{
private:
    int _current_index;
    Aggregate* _ag;
public:
    ContreteIterator(Aggregate* ag){
        _ag = ag;
        _current_index = 0;
    }

    virtual void First(){
        _current_index = 0;//当前游标回零
    }

    virtual void Next(){
        if(_current_index < _ag->getSize()){
            _current_index++;
        }
    }

    virtual bool IsDone(){
        return  (_current_index == _ag->getSize());
    }

    virtual Object CurrentItem(){
        return _ag->getItem(_current_index);
    }
};

class ConcreteAggregate : public Aggregate{
public:
    ConcreteAggregate(){
        for(int i=0;i<SIZE;i++){
            object[i]=i+100;
        }
    }

    virtual MyIteraor* CreatIterator(){
        return new ContreteIterator(this);//让迭代器能应用此集合
    }

    virtual Object getItem(int index){
        return object[index];
    }
    virtual int getSize(){
        return SIZE;
    }

private:
    Object object[SIZE];
};


int main(){
    Aggregate* ag = new ConcreteAggregate;
    MyIteraor* it = ag->CreatIterator();

    for(;!it->IsDone();it->Next()){
        cout<<it->CurrentItem()<<" ";
    }
    
    delete ag;
    delete it;

    cout<<"hello..."<<endl;
    return 0;
}
