#include<iostream>
#include<string.h>
#include<list>
using namespace std;

//结构型模式---->组合模式
class IFile{
public:
    virtual void display()            = 0;
    virtual int add(IFile *ifile)    = 0;
    virtual int remove(IFile *ifile) = 0;
    virtual list<IFile*>* getChild()  = 0;
};

//文件结点
class File : public IFile{
public:
    File(string name){
        m_name = name;
    }

    virtual void display(){
        cout<<"m_name:"<<m_name<<endl;
    }

    virtual int add(IFile *ifile){
        return -1;
    }

    virtual int remove(IFile *ifile){
        return -1;
    }

    virtual list<IFile*>* getChild(){
        return NULL;
    }

private:
    string m_name;
};

//目录节点
class Dir : public IFile{
public:
    Dir(string name){
        m_name = name;
        m_list = new list<IFile*>;
        m_list->clear();

    }

    virtual void display(){
        cout<<"m_name:"<<m_name<<endl;
    }

    virtual int add(IFile *ifile){
        m_list->push_back(ifile);

        return 0;
    }

    virtual int remove(IFile *ifile){
        m_list->remove(ifile);
        return 0;
    }

    virtual list<IFile*>* getChild(){
        
        return m_list;
    }

private:
    string         m_name;
    list<IFile*>*  m_list;
};

//递归显示树
void showTree(IFile* root,int level){
    //显示根结点
    //若根结点有下一级
                //（是文件）显示名字
                //文件夹-showTrow（子目录）
    int i = 0;
    if(root == NULL){
        return ;
    }
    for(i=0;i<level;i++){
        printf("\t");
    }
    //显示根结点
    root->display();



    list<IFile*>* mylist =root->getChild();
    if(mylist != NULL){      //说明是目录
        
        for(list<IFile*>::iterator it = mylist->begin();it!=mylist->end();it++){
             
            if((*it)->getChild() == NULL){
                for(int p=0;p<=level;p++){
                    printf("\t");
                }
                (*it)->display();
            }
            else{
                showTree((*it),level+1);
            }
            
        }
    }

}

int main(){
    Dir *root = new Dir("c");
    root->display();

    Dir *dir1 = new Dir("111dir");
    File *aaafile = new File("aaa.txt");
    //root->display();
    list<IFile*>* mylist =root->getChild();

    root->add(dir1);
    root->add(aaafile);

    for(list<IFile*>::iterator it = mylist->begin();it!=mylist->end();it++){
        (*it)->display();
    }

    //
    Dir *dir2 = new Dir("222dir");
    File *bbbfile = new File("bbb.txt");
    dir1->add(dir2);
    dir1->add(bbbfile);

    cout<<"showTree mode"<<endl;
    showTree(root,0);

    list<IFile*>* mylist1 =dir1->getChild();
    for(list<IFile*>::iterator it = mylist1->begin();it!=mylist1->end();it++){
        (*it)->display();
    }
    cout<<"hello..."<<endl;
    return 0;
}
